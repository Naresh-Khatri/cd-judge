services:
  web:
    build:
      context: ./web
      dockerfile: ./Dockerfile.dev
    container_name: cd-web
    restart: unless-stopped
    volumes:
      - ./web/src:/app/src
      - ./web/package.json:/app/package.json
      - ./web/tsconfig.json:/app/tsconfig.json
      - ./web/nodemon.json:/app/nodemon.json
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://dev:dev@db:5432/cd-judge
      - REDIS_URL=redis://cache:6379
      - RABBITMQ_URL=amqp://dev:dev@mq:5672
    command: nodemon --watch src --ext ts --exec "npm run dev"
    depends_on:
      - db
      - cache
      - mq

  worker:
    build:
      context: ./worker
      dockerfile: ./Dockerfile.dev
    container_name: cd-worker
    restart: unless-stopped
    volumes:
      - ./worker/src:/app/src
      - ./worker/package.json:/app/package.json
      - ./worker/tsconfig.json:/app/tsconfig.json
      - ./worker/nodemon.json:/app/nodemon.json
    security_opt:
      - seccomp=unconfined
    cap_add:
      - SYS_ADMIN
    ports:
      - "4000:4000"
    privileged: true
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://dev:dev@db:5432/cd-judge
      - REDIS_URL=redis://cache:6379
      - RABBITMQ_URL=amqp://dev:dev@mq:5672
    command: nodemon --watch src --ext ts --exec "npm run dev"
    depends_on:
      - db
      - cache
      - mq

  db:
    image: postgres:15-alpine
    container_name: "postgres"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=dev
      - POSTGRES_PASSWORD=dev
      - POSTGRES_DB=cd-judge
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # healthcheck:
    #   test: ["CMD-SHELL", "pg_isready -U dev -d cd-judge"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  mq:
    image: rabbitmq:3-management-alpine
    container_name: "rabbitmq"
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=dev
      - RABBITMQ_DEFAULT_PASS=dev
      - RABBITMQ_LOG_LEVEL=error
      - RABBITMQ_LOGS=-
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    # healthcheck:
    #   test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

  cache:
    image: redis:6.2-alpine
    container_name: "redis"
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - redis_data:/data
    # healthcheck:
    #   test: ["CMD", "redis-cli", "ping"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5

volumes:
  postgres_data:
  redis_data:
